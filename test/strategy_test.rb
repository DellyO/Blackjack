require './strategy'
require 'test/unit'

class StrategyTest < Test::Unit::TestCase
  def setup
    @strategy = Strategy.new
  end

  def test_basic_strategy
    assert_equal 'HIT', @strategy.determine_action(5, 2)
    assert_equal 'HIT', @strategy.determine_action(5, 3)
    assert_equal 'HIT', @strategy.determine_action(5, 4)
    assert_equal 'HIT', @strategy.determine_action(5, 5)
    assert_equal 'HIT', @strategy.determine_action(5, 6)
    assert_equal 'HIT', @strategy.determine_action(5, 7)
    assert_equal 'HIT', @strategy.determine_action(5, 8)
    assert_equal 'HIT', @strategy.determine_action(5, 9)
    assert_equal 'HIT', @strategy.determine_action(5, 10)
    assert_equal 'HIT', @strategy.determine_action(5, 11)

    assert_equal 'HIT', @strategy.determine_action(8, 2)
    assert_equal 'HIT', @strategy.determine_action(8, 3)
    assert_equal 'HIT', @strategy.determine_action(8, 4)
    assert_equal 'HIT', @strategy.determine_action(8, 5)
    assert_equal 'HIT', @strategy.determine_action(8, 6)
    assert_equal 'HIT', @strategy.determine_action(8, 7)
    assert_equal 'HIT', @strategy.determine_action(8, 8)
    assert_equal 'HIT', @strategy.determine_action(8, 9)
    assert_equal 'HIT', @strategy.determine_action(8, 10)
    assert_equal 'HIT', @strategy.determine_action(8, 11)

    assert_equal 'HIT', @strategy.determine_action(9, 2)
    assert_equal 'DOUBLE', @strategy.determine_action(9, 3)
    assert_equal 'DOUBLE', @strategy.determine_action(9, 4)
    assert_equal 'DOUBLE', @strategy.determine_action(9, 5)
    assert_equal 'DOUBLE', @strategy.determine_action(9, 6)
    assert_equal 'HIT', @strategy.determine_action(9, 7)
    assert_equal 'HIT', @strategy.determine_action(9, 8)
    assert_equal 'HIT', @strategy.determine_action(9, 9)
    assert_equal 'HIT', @strategy.determine_action(9, 10)
    assert_equal 'HIT', @strategy.determine_action(9, 11)

    assert_equal 'DOUBLE', @strategy.determine_action(10, 2)
    assert_equal 'DOUBLE', @strategy.determine_action(10, 3)
    assert_equal 'DOUBLE', @strategy.determine_action(10, 4)
    assert_equal 'DOUBLE', @strategy.determine_action(10, 5)
    assert_equal 'DOUBLE', @strategy.determine_action(10, 6)
    assert_equal 'DOUBLE', @strategy.determine_action(10, 7)
    assert_equal 'DOUBLE', @strategy.determine_action(10, 8)
    assert_equal 'DOUBLE', @strategy.determine_action(10, 9)
    assert_equal 'HIT', @strategy.determine_action(10, 10)
    assert_equal 'HIT', @strategy.determine_action(10, 11)

    assert_equal 'DOUBLE', @strategy.determine_action(11, 2)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 3)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 4)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 5)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 6)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 7)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 8)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 9)
    assert_equal 'DOUBLE', @strategy.determine_action(11, 10)
    assert_equal 'HIT', @strategy.determine_action(11, 11)

    assert_equal 'HIT', @strategy.determine_action(12, 2)
    assert_equal 'HIT', @strategy.determine_action(12, 3)
    assert_equal 'STAND', @strategy.determine_action(12, 4)
    assert_equal 'STAND', @strategy.determine_action(12, 5)
    assert_equal 'STAND', @strategy.determine_action(12, 6)
    assert_equal 'HIT', @strategy.determine_action(12, 7)
    assert_equal 'HIT', @strategy.determine_action(12, 8)
    assert_equal 'HIT', @strategy.determine_action(12, 9)
    assert_equal 'HIT', @strategy.determine_action(12, 10)
    assert_equal 'HIT', @strategy.determine_action(12, 11)

    assert_equal 'STAND', @strategy.determine_action(13, 2)
    assert_equal 'STAND', @strategy.determine_action(13, 3)
    assert_equal 'STAND', @strategy.determine_action(13, 4)
    assert_equal 'STAND', @strategy.determine_action(13, 5)
    assert_equal 'STAND', @strategy.determine_action(13, 6)
    assert_equal 'HIT', @strategy.determine_action(13, 7)
    assert_equal 'HIT', @strategy.determine_action(13, 8)
    assert_equal 'HIT', @strategy.determine_action(13, 9)
    assert_equal 'HIT', @strategy.determine_action(13, 10)
    assert_equal 'HIT', @strategy.determine_action(13, 11)

    assert_equal 'STAND', @strategy.determine_action(14, 2)
    assert_equal 'STAND', @strategy.determine_action(14, 3)
    assert_equal 'STAND', @strategy.determine_action(14, 4)
    assert_equal 'STAND', @strategy.determine_action(14, 5)
    assert_equal 'STAND', @strategy.determine_action(14, 6)
    assert_equal 'HIT', @strategy.determine_action(14, 7)
    assert_equal 'HIT', @strategy.determine_action(14, 8)
    assert_equal 'HIT', @strategy.determine_action(14, 9)
    assert_equal 'HIT', @strategy.determine_action(14, 10)
    assert_equal 'HIT', @strategy.determine_action(14, 11)

    assert_equal 'STAND', @strategy.determine_action(15, 2)
    assert_equal 'STAND', @strategy.determine_action(15, 3)
    assert_equal 'STAND', @strategy.determine_action(15, 4)
    assert_equal 'STAND', @strategy.determine_action(15, 5)
    assert_equal 'STAND', @strategy.determine_action(15, 6)
    assert_equal 'HIT', @strategy.determine_action(15, 7)
    assert_equal 'HIT', @strategy.determine_action(15, 8)
    assert_equal 'HIT', @strategy.determine_action(15, 9)
    assert_equal 'SURRENDER', @strategy.determine_action(15, 10)
    assert_equal 'HIT', @strategy.determine_action(15, 11)

    assert_equal 'STAND', @strategy.determine_action(16, 2)
    assert_equal 'STAND', @strategy.determine_action(16, 3)
    assert_equal 'STAND', @strategy.determine_action(16, 4)
    assert_equal 'STAND', @strategy.determine_action(16, 5)
    assert_equal 'STAND', @strategy.determine_action(16, 6)
    assert_equal 'HIT', @strategy.determine_action(16, 7)
    assert_equal 'HIT', @strategy.determine_action(16, 8)
    assert_equal 'SURRENDER', @strategy.determine_action(16, 9)
    assert_equal 'SURRENDER', @strategy.determine_action(16, 10)
    assert_equal 'SURRENDER', @strategy.determine_action(16, 11)

    assert_equal 'STAND', @strategy.determine_action(17, 2)
    assert_equal 'STAND', @strategy.determine_action(17, 3)
    assert_equal 'STAND', @strategy.determine_action(17, 4)
    assert_equal 'STAND', @strategy.determine_action(17, 5)
    assert_equal 'STAND', @strategy.determine_action(17, 6)
    assert_equal 'STAND', @strategy.determine_action(17, 7)
    assert_equal 'STAND', @strategy.determine_action(17, 8)
    assert_equal 'STAND', @strategy.determine_action(17, 9)
    assert_equal 'STAND', @strategy.determine_action(17, 10)
    assert_equal 'STAND', @strategy.determine_action(17, 11)

    assert_equal 'STAND', @strategy.determine_action(20, 2)
    assert_equal 'STAND', @strategy.determine_action(20, 3)
    assert_equal 'STAND', @strategy.determine_action(20, 4)
    assert_equal 'STAND', @strategy.determine_action(20, 5)
    assert_equal 'STAND', @strategy.determine_action(20, 6)
    assert_equal 'STAND', @strategy.determine_action(20, 7)
    assert_equal 'STAND', @strategy.determine_action(20, 8)
    assert_equal 'STAND', @strategy.determine_action(20, 9)
    assert_equal 'STAND', @strategy.determine_action(20, 10)
    assert_equal 'STAND', @strategy.determine_action(20, 11)

    assert_equal 'STAND', @strategy.determine_action(21, 2)
    assert_equal 'STAND', @strategy.determine_action(21, 3)
    assert_equal 'STAND', @strategy.determine_action(21, 4)
    assert_equal 'STAND', @strategy.determine_action(21, 5)
    assert_equal 'STAND', @strategy.determine_action(21, 6)
    assert_equal 'STAND', @strategy.determine_action(21, 7)
    assert_equal 'STAND', @strategy.determine_action(21, 8)
    assert_equal 'STAND', @strategy.determine_action(21, 9)
    assert_equal 'STAND', @strategy.determine_action(21, 10)
    assert_equal 'STAND', @strategy.determine_action(21, 11)
  end

  def test_soft_hands
    assert_equal 'HIT', @strategy.determine_action(13, 2, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(13, 3, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(13, 4, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(13, 5, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(13, 6, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(13, 7, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(13, 8, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(13, 9, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(13, 10, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(13, 11, {'soft' => true})

    assert_equal 'HIT', @strategy.determine_action(14, 2, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 3, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 4, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(14, 5, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(14, 6, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 7, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 8, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 9, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 10, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 11, {'soft' => true})

    assert_equal 'HIT', @strategy.determine_action(15, 2, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(15, 3, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(15, 4, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(15, 5, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(15, 6, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(15, 7, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(15, 8, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(15, 9, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(15, 10, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(15, 11, {'soft' => true})

    assert_equal 'HIT', @strategy.determine_action(16, 2, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(16, 3, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(16, 4, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(16, 5, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(16, 6, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(16, 7, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(16, 8, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(16, 9, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(16, 10, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(16, 11, {'soft' => true})

    assert_equal 'HIT', @strategy.determine_action(17, 2, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(17, 3, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(17, 4, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(17, 5, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(17, 6, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(17, 7, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(17, 8, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(17, 9, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(17, 10, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(17, 11, {'soft' => true})

    assert_equal 'STAND', @strategy.determine_action(18, 2, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(18, 3, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(18, 4, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(18, 5, {'soft' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(18, 6, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(18, 7, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(18, 8, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(18, 9, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(18, 10, {'soft' => true})
    assert_equal 'HIT', @strategy.determine_action(18, 11, {'soft' => true})

    assert_equal 'STAND', @strategy.determine_action(19, 2, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 3, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 4, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 5, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 6, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 7, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 8, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 9, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 10, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(19, 11, {'soft' => true})

    assert_equal 'STAND', @strategy.determine_action(20, 2, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 3, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 4, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 5, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 6, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 7, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 8, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 9, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 10, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 11, {'soft' => true})

    assert_equal 'STAND', @strategy.determine_action(21, 2, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 3, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 4, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 5, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 6, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 7, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 8, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 9, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 10, {'soft' => true})
    assert_equal 'STAND', @strategy.determine_action(21, 11, {'soft' => true})
  end

  def test_pairs
    assert_equal 'SPLIT', @strategy.determine_action(4, 2, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(4, 3, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(4, 4, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(4, 5, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(4, 6, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(4, 7, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(4, 8, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(4, 9, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(4, 10, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(4, 11, {'pair' => true})

    assert_equal 'SPLIT', @strategy.determine_action(6, 2, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(6, 3, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(6, 4, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(6, 5, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(6, 6, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(6, 7, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(6, 8, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(6, 9, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(6, 10, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(6, 11, {'pair' => true})

    assert_equal 'HIT', @strategy.determine_action(8, 2, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(8, 3, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(8, 4, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(8, 5, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(8, 6, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(8, 7, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(8, 8, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(8, 9, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(8, 10, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(8, 11, {'pair' => true})

    assert_equal 'DOUBLE', @strategy.determine_action(10, 2, {'pair' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(10, 3, {'pair' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(10, 4, {'pair' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(10, 5, {'pair' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(10, 6, {'pair' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(10, 7, {'pair' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(10, 8, {'pair' => true})
    assert_equal 'DOUBLE', @strategy.determine_action(10, 9, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(10, 10, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(10, 11, {'pair' => true})

    assert_equal 'SPLIT', @strategy.determine_action(12, 2, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 3, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 4, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 5, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 6, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(12, 7, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(12, 8, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(12, 9, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(12, 10, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(12, 11, {'pair' => true})

    assert_equal 'SPLIT', @strategy.determine_action(14, 2, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(14, 3, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(14, 4, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(14, 5, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(14, 6, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(14, 7, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 8, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 9, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 10, {'pair' => true})
    assert_equal 'HIT', @strategy.determine_action(14, 11, {'pair' => true})

    assert_equal 'SPLIT', @strategy.determine_action(16, 2, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 3, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 4, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 5, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 6, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 7, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 8, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 9, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 10, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(16, 11, {'pair' => true})

    assert_equal 'SPLIT', @strategy.determine_action(18, 2, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(18, 3, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(18, 4, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(18, 5, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(18, 6, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(18, 7, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(18, 8, {'pair' => true})
    assert_equal 'SPLIT', @strategy.determine_action(18, 9, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(18, 10, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(18, 11, {'pair' => true})

    assert_equal 'STAND', @strategy.determine_action(20, 2, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 3, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 4, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 5, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 6, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 7, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 8, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 9, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 10, {'pair' => true})
    assert_equal 'STAND', @strategy.determine_action(20, 11, {'pair' => true})

    assert_equal 'SPLIT', @strategy.determine_action(12, 2, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 3, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 4, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 5, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 6, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 7, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 8, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 9, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 10, {'pair' => true, 'soft' => true})
    assert_equal 'SPLIT', @strategy.determine_action(12, 11, {'pair' => true, 'soft' => true})
  end
end
